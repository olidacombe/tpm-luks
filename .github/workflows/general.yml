name: Rust

on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  # TODO dry usages of this same string in image:
  CI_IMAGE: ${{ github.repository }}-ci
  REGISTRY: ghcr.io
  REPO: ${{ github.repository }}
  #SWTPM_IMAGE: ${{ github.repository_owner }}/swtpm
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    container:
      image: ${{ github.repository }}-ci
    services:
      swtpm:
        image: ${{ github.repository_owner }}/swtpm
        options: >-
          --security-opt seccomp=unconfined
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          TCTI: swtpm:port=2321,host=swtpm

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    container:
      image: ${{ github.repository }}-ci
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings

  binary:
    name: Binary
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    services:
      swtpm:
        image: ${{ github.repository_owner }}/swtpm
        options: >-
          --security-opt seccomp=unconfined
    steps: 
      - uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          IMAGE="${REGISTRY}/$REPO"
          echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          echo ::set-output name=tag::${TAG}

      - name: Set up Docker Buildx
        id: buildx
        # Use the action from the master, as we've seen some inconsistencies with @v1
        # Issue: https://github.com/docker/build-push-action/issues/286
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image with static binary
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          target: binary
          push: true
          tags: ${{ steps.prep.outputs.tagged_image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build image with static test binary
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          target: binary
          push: true
          tags: ${{ steps.prep.outputs.tagged_image }}-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create encrypted disk image for tests
        run: |
          docker volume create test-data
          docker run \
              --privileged \
              --cap-add MKNOD \
              --rm \
              -v test-data:/workdir \
              -e PASSPHRASE=insecure \
              -e TSS2_LOG=all+debug \
              olidacombe/tpm-luks-ci \
              ./make-luks-image.sh crypty

      - name: Build bats testing image
        uses: docker/build-push-action@v2
        with:
          context: ./tests
          file: ./tests/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            BIN_IMAGE=${{ steps.prep.outputs.tagged_image }}-test
          target: test
          push: false
          load: true
          tags: bats-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run bats tests against static bin
        run: |
          docker run \
          --privileged \
          --cap-add MKNOD \
          --rm \
          -v test-data:/data \
          -e TCTI="swtpm:port=2321,host=swtpm" \
          -e PASSPHRASE=insecure \
          bats-test

      - name: Clean up test data volume
        run: |
          docker volume rm test-data
